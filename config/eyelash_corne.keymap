//
// Based initially on github:a741725193/zmk-new_corne
// Inspiration from github:urob/zmk-config
//
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include <input/processors.dtsi>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/german.dtsi"

#include "key-positions.h"


/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

//
// Global defaults
//

// Layer IDs
#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define SYMBOL 4
#define MEDIA 5
#define SYS 6

#define vvv &trans
#define ___ &none

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};


//
// Homerow mods
//
/*                KEY POSITIONS

  ╭─────────────────────────╮ ╭─────────────────────────╮
  │ LT5 LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ LM5 LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ LB5 LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────────╯
              ╰─────────────╯ ╰─────────────╯ */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.


//
// Leader key and mouse emulation
//

//#include "leader.dtsi"
//#include "mouse.dtsi"

//
// Nav cluster
//

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LT    &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RT    &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DN    &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BK    &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

//
// Behaviors
//
/ {
    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <30>;
    };
};

//
// Custom behaviors
//

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)
#define M_COMMA &comma_morph
//#define M_COMMA &kp COMMA

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)
#define M_DOT &dot_morph
//#define M_DOT &kp DOT

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)
#define M_QEX &qexcl
//#define M_QEX &kp EXCL

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
// SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
// SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
//ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

//
// Aliases
//

// Homerow mods (GACS)
#define H_A &hml LGUI A
#define H_R &hml LALT R
#define H_S &hml LCTRL S
#define H_T &hml LSHFT T
#define H_N &hmr RSHFT N
#define H_E &hmr LCTRL E
#define H_I &hmr LALT I
#define H_O &hmr LGUI O

#define MOD_LEFT &kp LGUI &kp LALT &kp LCTRL &kp LSHFT
#define MOD_RIGHT &kp RSHFT &kp LCTRL &kp LALT &kp LGUI

// Mouse
#define M_UP &mmv MOVE_UP
#define M_LT &mmv MOVE_LEFT
#define M_RT &mmv MOVE_RIGHT
#define M_DN &mmv MOVE_DOWN
#define M_CK1 &mkp LCLK
#define M_CK2 &mkp RCLK
#define M_CK3 &mkp MCLK

// Shorter aliases
#define K_HM   &kp HOME
#define K_ED   &kp END
#define K_PGDN &kp PG_DN
#define K_PGUP &kp PG_UP

// Thumbs
#define SPC_NAV &lt_spc NAV 0
#define RET_FN &lt FN RET
#define RET_NUM &lt NUM RET
#define SPC_SYM &lt_spc SYMBOL 0
#define DEL_MEDIA &lt MEDIA DEL

// Bluetooth
#define BT_S0 &bt BT_SEL 0
#define BT_S1 &bt BT_SEL 1
#define BT_S2 &bt BT_SEL 2
#define BT_S3 &bt BT_SEL 3
#define BT_S4 &bt BT_SEL 4
#define BT_CL &bt BT_CLR_ALL

// Leds
#define LED_ON  &rgb_ug RGB_ON
#define LED_OFF &rgb_ug RGB_OFF
#define LED_EFR &rgb_ug RGB_EFR
#define LED_EFF &rgb_ug RGB_EFF
#define LED_SPD &rgb_ug RGB_SPD
#define LED_SPI &rgb_ug RGB_SPI
#define LED_BRD &rgb_ug RGB_BRD
#define LED_BRI &rgb_ug RGB_BRI

// Encoder
#define ENC_VOL  &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN
#define MUTE     &kp C_MUTE
#define PLAY   &kp K_PLAY_PAUSE
#define PREV   &kp K_PREV
#define NEXT   &kp K_NEXT

// Others
#define K_PAUSE  &kp PAUSE_BREAK

//
// Layers
//

ZMK_LAYER(Colemak,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
  &kp TAB &kp Q   &kp W   &kp F   &kp P   &kp G                      &kp UP              &kp J   &kp L   &kp U   &kp Y  &kp SEMI ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
 &kp LCTRL H_A     H_R     H_S     H_T    &kp D             &kp LEFT &kp RET &kp RIGHT   &kp H    H_N     H_E     H_I     H_O    ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
 &kp LSHFT &kp Z  &kp X   &kp C   &kp V   &kp B    MUTE              &kp DOWN            &kp K   &kp M   M_COMMA  M_DOT &kp FSLH   ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                 &kp LGUI SPC_NAV  RET_FN                        RET_NUM SPC_SYM DEL_MEDIA
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭──────────────────╮
  ,   ENC_VOL
//  ╰──────────────────╯
)

ZMK_LAYER(Nav,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
    ___     ___     ___     ___     ___     ___                        M_UP              &kp INS NAV_BK  NAV_DEL  ___     ___     ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___              MOD_LEFT               ___                M_LT    M_CK1    M_RT     NAV_LT  NAV_DN  NAV_UP  NAV_RT  &kp RET  ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___     ___     ___     ___     ___     ___     ___                M_DN              K_HM    K_PGDN  K_PGUP  K_ED     ___     ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────╯           ╰───────╯          ├───────┼───────┼───────┼───────┴──────┴──────╯
                           ___     ___     ___                                           M_CK1   M_CK3   M_CK2
//                       ╰───────┴───────┴───────╯                                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    &scroll_encoder
//  ╰───────────────────╯
)

ZMK_LAYER(Fn,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
    ___   &kp F12 &kp F7  &kp F8  &kp F9  &kp PSCRN                     M_UP               ___     ___     ___     ___     ___    ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___   &kp F11 &kp F4  &kp F5  &kp F6  &kp SCLK             M_LT    M_CK1    M_RT     ___              MOD_RIGHT                ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___   &kp F10 &kp F1  &kp F2  &kp F3  K_PAUSE   ___                M_DN                ___     ___     ___     ___     ___    ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                 &kp K_APP   vvv     vvv                            ___     ___     ___
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    &scroll_encoder
//  ╰───────────────────╯
)

ZMK_LAYER(Num,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
 &kp PLUS &kp MINUS &kp N7 &kp N8  &kp N9  &kp DOT                     M_UP               ___     ___     ___     ___     ___    ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
 &kp ASTRK &kp FSLH &kp N4 &kp N5  &kp N6 &kp COMMA            M_LT    M_CK1    M_RT     ___              MOD_RIGHT                ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
 &kp LPAR &kp RPAR &kp N1  &kp N2  &kp N3 &kp DLLR  ___                M_DN                ___     ___     ___     ___     ___    ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                  &kp N0    vvv     vvv                            ___     ___     ___
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    &scroll_encoder
//  ╰───────────────────╯
)

ZMK_LAYER(Symbol,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
&kp GRAVE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT                   M_UP               ___     ___     ___     ___     ___     ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
&kp EQUAL &kp CARET &kp AMPS &kp ASTRK &kp COLON &kp PIPE      M_LT    M_CK1    M_RT     ___              MOD_RIGHT                ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
 &kp BSLH &kp UNDER &kp LBRC &kp RBRC &kp LBKT &kp RBKT  vvv           M_DN               ___     ___     ___     ___     ___     ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                &kp LPAR &kp RPAR &kp SEMI                          ___     ___     ___
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    &scroll_encoder
//  ╰───────────────────╯
)

// TODO: add media controls
ZMK_LAYER(Media,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
    ___     ___     ___     ___     ___     ___                        M_UP               ___     ___     ___     ___     ___     ___
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___     ___     ___    PREV    PLAY     NEXT               M_LT    M_CK1    M_RT       ___     ___     ___     ___    ___     ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
    ___     ___     ___     ___     ___     ___    MUTE                M_DN               ___     ___     ___     ___     ___     ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                    ___     ___     ___                            ___     ___     ___
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    ENC_VOL
//  ╰───────────────────╯
)

// Make it harder to activate to avoid accidental presses
// Needs both FN and NUM
ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS) // FN + NUM --> SYS.
ZMK_LAYER(Sys,
//╭──────┬───────┬───────┬───────┬───────┬───────╮                   ╭───────╮          ╭───────┬───────┬───────┬───────┬──────┬──────╮
   BT_S0   BT_S1   BT_S2   BT_S3   BT_S4   BT_CL                       M_UP               ___     ___     ___     ___     ___  &kp K_LOCK
//├──────┼───────┼───────┼───────┼───────┼───────┤           ╭───────┼───────┼───────╮  ├───────┼───────┼───────┼───────┼──────┼──────┤
  LED_OFF LED_ON    ___     ___     ___     ___                M_LT    M_CK1    M_RT       ___     ___     ___     ___    ___     ___
//├──────┼───────┼───────┼───────┼───────┼───────┼───────╮   ╰───────┼───────┼───────╯  ├───────┼───────┼───────┼───────┼──────┼──────┤
  LED_BRD LED_BRI LED_SPD LED_SPI LED_EFR LED_EFF   ___                M_DN               ___     ___     ___     ___     ___     ___
//╰──────┴───────┴───────┴───────┼───────┼───────┼───────┤           ╰───────╯  ╭───────┼───────┼───────┼───────┴───────┴──────┴──────╯
                                    ___     ___     ___                            ___     ___     ___
//                               ╰───────┴───────┴───────╯                      ╰───────┴───────┴───────╯
//  ╭───────────────────╮
  ,    &rgb_encoder
//  ╰───────────────────╯
)

